#!/bin/bash

set -o errexit
set -o pipefail
set -o nounset

PORT="${APP_PORT:-8000}"

if [ -z "${POSTGRES_USER}" ]; then
    base_postgres_image_default_user='postgres'
    export POSTGRES_USER="${base_postgres_image_default_user}"
fi

exitFunc() {
  echo 'Exiting...'
  exit -1
}

postgres_ready() {
poetry run python << END
import sys
import psycopg2
try:
    psycopg2.connect(
        dbname="${POSTGRES_DB}",
        user="${POSTGRES_USER}",
        password="${POSTGRES_PASSWORD}",
        host="${POSTGRES_HOST}",
        port="${POSTGRES_PORT}",
    )
except psycopg2.OperationalError:
    sys.exit(-1)
sys.exit(0)
END
}

wait_for_postgres() {
count=0
trap exitFunc INT
echo "Checking the PostgreSQL connection"
until postgres_ready; do
  count=$((count+1))
  if [ $count -eq 10 ]; then
      >&2 echo 'A waiting time has been reached. Exiting...'
      exit -1
  fi
  >&2 echo 'Waiting for PostgreSQL to become available...'
  sleep 2
done
>&2 echo 'PostgreSQL is available'
}

show_help() {
    echo """
Usage: docker-compose -f <yaml-file> run <service> COMMAND
Commands
prod     : Start django using a prod ready gunicorn server
dev       : Start a normal Django development server
bash      : Start a bash shell
manage    : Start manage.py
python    : Run a python command
shell     : Start a Django Python shell
add       : Add package via Poetry
celery    : Run celery
celery-dev: Run a hot-reloading dev version of celery
help      : Show this message
"""
}

run_setup_commands(){
  if [ "$COLLECTSTATIC_ON_STARTUP" = "1" ] ; then
    poetry run python manage.py collectstatic --noinput
  fi
  poetry run python manage.py migrate
}

case "$1" in
    dev)
        wait_for_postgres
        exec poetry run python manage.py runserver 0.0.0.0:"${PORT}"
    ;;
    prod)
        wait_for_postgres
        run_setup_commands
        exec poetry run gunicorn config.wsgi --bind 0.0.0.0:"${PORT}" --chdir=/opt/project/src
    ;;
    bash)
        exec /bin/bash "${@:2}"
    ;;
    add)
      # Usage: docker-compose run web add django-environ@^0.11
      # Everything after "add" is passed straight to Poetry.
      exec poetry add "${@:2}"
    ;;
    manage)
        exec poetry run python manage.py "${@:2}"
    ;;
    python)
        exec poetry run python "${@:2}"
    ;;
    shell)
        exec poetry run python manage.py shell
    ;;
    pip-compile)
        exec poetry run pip-compile requirements.in
    ;;
    celery)
        wait_for_postgres
        exec poetry run celery -A config "${@:2}"
    ;;
    celery-dev)
        wait_for_postgres
        if [ "$2" = "worker" ]; then
            exec poetry run watchgod celery.__main__.main --args -A config worker "${@:3}"
        elif [ "$2" = "beat" ]; then
            exec poetry run watchgod celery.__main__.main --args -A config beat "${@:3}"
        else
            exec poetry run watchgod celery.__main__.main --args -A config "${@:2}"
        fi
    ;;
    test)
        exec poetry run pytest
    ;;
    *)
        show_help
        exit 1
    ;;
esac
