x-django: &django
  build:
    context: .
    dockerfile: ./docker/django/Dockerfile
    args:
      ENVIRONMENT: development  # Pass the build argument
  image:  "${COMPOSE_PROJECT_NAME}_dev"
  depends_on:
    - postgres
    - redis
    - mailhog
  volumes:
    - ./src:/opt/project/src:cached
    - /opt/project/src/.venv
    - ./data/dev:/data:z
  env_file:
    - ./.env

services:
  django:
    <<: *django
    ports:
      - "8000:8000"
    command: dev
    entrypoint: /entrypoint
  celeryworker:
    <<: *django
    command: celery-dev worker -l INFO
    healthcheck:
      test: ["CMD-SHELL", "celery -A config inspect ping -d celery@$$HOSTNAME"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 30s
  celerybeat:
    <<: *django
    command: celery-dev beat -l INFO
  flower:
    image: mher/flower:0.9.7
    command: "flower --broker=${REDIS_URL} --port=5555 --url-prefix=flower"
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_started
      celeryworker:
        condition: service_healthy
      celerybeat:
        condition: service_started

    env_file:
      - ./.env
  redis:
    image: redis:6.0
    volumes:
      - dev_redis:/data
  postgres:
    build:
      context: .
      dockerfile: ./docker/postgres/Dockerfile
    image: "${COMPOSE_PROJECT_NAME}_dev_postgres"
    volumes:
      - ./data/dev_postgres:/var/lib/postgresql/data:Z
      - ./data/dev_backups:/backups:z
    # ports:
    #   - "5432:5432"
    # environment:
    #   - POSTGRES_ADDITIONAL_DATABASES=db1,db2
    env_file:
      - ./.env
  mailhog:
    image: mailhog/mailhog
    logging:
      driver: 'none'  # disable saving logs
    ports:
      - "8025:8025" # web ui
  mkdocs:
    build:
      context: .
      dockerfile: ./docker/mkdocs/Dockerfile
    image: "${COMPOSE_PROJECT_NAME}_dev_mkdocs"
    command: serve
    environment:
    - PYTHONPATH=/code
    volumes:
      - ./docs:/docs:cached
      - ./data/dev_mkdocs:/data:z
      - ./src:/code/src:cached
       - /code/.venv
    ports:
      - "8050:8000"
    env_file:
      - ./.env
# Uncomment if you need Caddy locally
#  caddy:
#    build:
#      context: .
#      dockerfile: ./docker/caddy/Dockerfile
#    image: "${COMPOSE_PROJECT_NAME}_dev_caddy"
#    ports:
#      - "80:80"
#      - "443:443"
#    volumes:
#      - dev_caddy:/data
#    env_file:
#      - ./.env
#    depends_on:
#      - django
#      - flower

volumes:
  dev_redis:
  dev_caddy:
